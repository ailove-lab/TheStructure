// Generated by CoffeeScript 1.6.2
var Atom, H, R, Structure, W, a, camera, light1, light2, mat1, mat2, r, render, renderer, s, scene, structure;

R = 1.5;

r = R / 2.0;

s = Math.sqrt(3.0);

a = R * s;

W = window.innerWidth;

H = window.innerHeight;

mat1 = new THREE.MeshPhongMaterial({
  color: 0x000000,
  ambient: 0x888888,
  specular: 0xffffff,
  shininess: 250,
  side: THREE.DoubleSide,
  vertexColors: THREE.VertexColors,
  shading: THREE.FlatShading
});

mat2 = new THREE.MeshPhongMaterial({
  color: 0xCC2244,
  ambient: 0x444444,
  specular: 0xffffff,
  shininess: 250,
  side: THREE.DoubleSide,
  vertexColors: THREE.VertexColors,
  shading: THREE.FlatShading
});

scene = new THREE.Scene();

camera = new THREE.PerspectiveCamera(50, W / H, 0.1, 1000);

camera.position.y = 3;

camera.position.z = 25;

scene.add(new THREE.AmbientLight(0x444444));

light1 = new THREE.DirectionalLight(0xEE2244, 1.0);

light1.position.set(0, 25, 25);

scene.add(light1);

light2 = new THREE.DirectionalLight(0x4422EE, 1.0);

light2.position.set(0, -25, 25);

scene.add(light2);

renderer = new THREE.WebGLRenderer();

renderer.setSize(W, H);

document.body.appendChild(renderer.domElement);

Atom = (function() {
  function Atom(i, j) {
    var m, mat;

    this.i = i;
    this.j = j;
    this.x = a * this.i + Math.round((this.j - 1) / 2) * a / 2;
    this.y = (Math.round(this.j / 2) * 3 - Math.abs(this.j) % 2) * r;
    this.x *= 0.5;
    this.y *= 0.5;
    console.log(this.i, this.j, this.x, this.y / r);
    this.geo = new THREE.TetrahedronGeometry(R, 0);
    m = new THREE.Matrix4;
    if (Math.abs(this.j % 2) === 0) {
      m.makeRotationY(Math.PI / 4);
    } else {
      m.makeRotationY(-Math.PI / 4);
    }
    this.geo.applyMatrix(m);
    if (Math.abs(this.j % 2) === 0) {
      m.makeRotationX(-Math.PI / 5);
    } else {
      m.makeRotationX(Math.PI / 5);
    }
    this.geo.applyMatrix(m);
    mat = mat2;
    this.mesh = new THREE.Mesh(this.geo, mat);
    this.obj = new THREE.Object3D;
    this.obj.add(this.mesh);
    this.obj.position.x = this.x;
    this.obj.position.y = this.y;
  }

  Atom.prototype.draw = function() {};

  Atom.prototype.animation = function() {
    this.obj.rotation.y += this.x * Math.PI / 300;
    return this.obj.rotation.x += this.y * Math.PI / 100;
  };

  return Atom;

})();

Structure = (function() {
  Structure.prototype.atoms = [];

  function Structure() {
    var A, atom, i, j, l, _i, _j, _ref, _ref1, _ref2;

    this.obj = new THREE.Object3D;
    this.obj.rotation.z = Math.PI;
    A = 16;
    for (j = _i = -A, _ref = A / 2; -A <= _ref ? _i <= _ref : _i >= _ref; j = -A <= _ref ? ++_i : --_i) {
      l = (j + A) / 2 | 0;
      for (i = _j = _ref1 = A / 4 | 0, _ref2 = -l + A / 4 | 0; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = _ref1 <= _ref2 ? ++_j : --_j) {
        this.atoms.push(atom = new Atom(i, j));
        this.obj.add(atom.obj);
      }
    }
    scene.add(this.obj);
  }

  Structure.prototype.draw = function() {};

  Structure.prototype.animation = function() {
    var atom, _i, _len, _ref, _results;

    _ref = this.atoms;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      atom = _ref[_i];
      _results.push(atom.animation());
    }
    return _results;
  };

  Structure.prototype.atom = function(i, j) {};

  return Structure;

})();

structure = new Structure;

render = function() {
  requestAnimationFrame(render);
  structure.animation();
  return renderer.render(scene, camera);
};

render();
